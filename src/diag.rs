//! Compilation Diagnostics
//!
//! The data structures used to keep track of compilation diagnostic
//! information. This includes the main `Diagnostic` type which
//! represnts a syntax or sematic error during compilation.
//!
//! The types in this module will usually be consumed by pushing
//! diagnostics into a `DiagnosticBag`.

use crate::syntax::text::Span;

/// The main `Daignostic` type. Each diagnostic consists of a primary
/// message, location, and level.
pub struct Diagnostic
{
    /// The diagnostic message generated by the compiler
    pub message: String,

    /// The location that this diagnostic occured at
    pub span: Span,
}

impl Diagnostic
{
    /// Constructs a new diagnostic from the given message and
    /// location.
    ///
    /// # Parameters
    ///  * `message` - the diagnostic message to emit
    ///  * `span` - The locaiton the diagnostic is tied to. If there
    ///             is no logical location for this diagnostic then
    ///             `DUMMY_SPAN` should be used.
    pub fn new<S>(message: S, span: Span) -> Self
        where S: Into<String>
    {
        Diagnostic {
            message: message.into(),
            span
        }
    }
}
